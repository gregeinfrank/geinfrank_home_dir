;; package.el
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                         ("marmalade" . "http://marmalade-repo.org/packages/")
                         ("melpa" . "http://melpa.milkbox.net/packages/")))
(setq package-enable-at-startup nil)
    (package-initialize)

;; el-get
(add-to-list 'load-path "~/.emacs.d/el-get/el-get")
(require 'el-get nil 'noerror)
;(unless (require 'el-get nil 'noerror)
;  (with-current-buffer
;      (url-retrieve-synchronously
;       "https://raw.github.com/dimitri/el-get/master/el-get-install.el")
;    (goto-char (point-max))
;    (eval-print-last-sexp)))
(add-to-list 'el-get-recipe-path "~/.emacs.d/el-get-user/recipes")
(el-get 'sync)

;; Turns the menu off
(menu-bar-mode nil)

;; Turns the startup message off
(setq inhibit-startup-message t)

;; Don't wrap lines
(set-default 'truncate-lines t)

;; Refresh file
(defun refresh-file ()
  (interactive)
  (revert-buffer t t t)
  )
(global-set-key [f9] 'refresh-file)

;; shell stuff
;; Maps up and down arrow in emacs shell mode to bring back previous commands
(add-hook 'shell-mode-hook
          '(lambda ()
             (define-key shell-mode-map [up] 'comint-previous-input)
             (define-key shell-mode-map [down] 'comint-next-input)
             )
          )
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on) ;;junk chars in shell

;; move up/down 10 lines
(global-set-key (kbd "M-n")
    (lambda () (interactive) (next-line 10)))
(global-set-key (kbd "M-p")
    (lambda () (interactive) (next-line -10)))

;; import ipdb; ipdb.set_trace()
(fset 'trace
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ("        import ipdb; ipdb.set_trace()" 0 "%d")) arg)))


;; .us and .mustache template files should open in html mode
(setq auto-mode-alist (cons '("\\.us$" . html-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.mustache$" . html-mode) auto-mode-alist))

;; .less files should open in CSS mode
(setq auto-mode-alist (cons '("\\.less$" . css-mode) auto-mode-alist))

;; follow symlinks to version controlled files without confirmation
(setq vc-follow-symlinks t)

;; highlight 80 characters on each line - pep8
(setq fci-rule-width 1)
(setq fci-rule-color "#dddddd")
(setq-default fci-rule-column 80)
;(add-hook 'after-change-major-mode-hook 'fci-mode)

;; use only spaces, no tab charaters
(setq-default indent-tabs-mode nil) 

;; line number mode
(global-linum-mode 1)
(setq linum-format "%d ")

;; map some files to their mode
(add-to-list 'auto-mode-alist '("\\dot_emacs\\'" . emacs-lisp-mode))
(add-to-list 'auto-mode-alist '("\\dot_bash_profile\\'" . shell-script-mode))

;; Color theme
(color-theme-gray30)

;; Jedi
(setq jedi:setup-keys t)
(add-hook 'python-mode-hook 'jedi:setup)

;; projectile
(projectile-global-mode)
(setq projectile-completion-system 'grizzl)
;; (define-key projectile-mode-map [M-p] 'projectile-find-file)


;; flymake for python
(when (load "flymake" t)
  (defun flymake-pyflakes-init ()
    (let* ((temp-file (flymake-init-create-temp-buffer-copy
                       'flymake-create-temp-inplace))) ;; this might have to change to flymake-create-temp-copy if using tramp because it'll be mad slow
    (list "~/.emacs.d/pycheckers.sh" (list temp-file))))
  ;; only process python files
  (add-to-list 'flymake-allowed-file-name-masks
               '("\\.py\\'" flymake-pyflakes-init))
)

(add-hook 'find-file-hook 'flymake-find-file-hook)

;; flymake
(setq flymake-run-in-place nil)
(setq temporary-file-directory "~/.emacs.d/tmp/")
(setq flymake-log-level 3)

;; flymake - underline errors/warnings rather than highlight
(custom-set-faces
 '(flymake-errline ((((class color)) (:underline "red"))))
 '(flymake-warnline ((((class color) (background dark)) (:underline "yellow")))))

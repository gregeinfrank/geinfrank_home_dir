;;;;;;;;;;;;
;;;;;BEGIN GEINFRANK
;;;;;;;;;;;

(setq load-path (append load-path '("~/.emacs.d")))

;(require 'flymake)
(require 'autopair)
;(require 'tree-mode)
;(require 'windata)
;(require 'dirtree)
;(autopair-global-mode)
(require 'hide-lines)
;; TODO: Use grizzl
;; (autoload 'ido "ido" t)
;;   (ido-mode t)
;;   (setq ido-enable-flex-matching t) ;; enable fuzzy matching
(require 'grep-edit)
(require 'js-beautify)
  ;; Put autosave files (ie #foo#) in one place, *not*
  ;; scattered all over the file system!
(defvar autosave-dir "~/emacs_autosaves/") 
(make-directory autosave-dir t)

(defun auto-save-file-name-p (filename)
  (string-match "^#.*#$" (file-name-nondirectory filename)))

(defun make-auto-save-file-name ()
  (concat autosave-dir
          (if buffer-file-name
              (concat "#" (file-name-nondirectory buffer-file-name) "#")
            (expand-file-name
             (concat "#%" (buffer-name) "#")))))

;; Put backup files (ie foo~) in one place too. (The backup-directory-alist
;; list contains regexp=>directory mappings; filenames matching a regexp are
;; backed up in the corresponding directory. Emacs will mkdir it if necessary.)
(defvar backup-dir "~/emacs_backups/")
(setq backup-directory-alist (list (cons "." backup-dir)))

;; Turn the menu off
(menu-bar-mode nil)
;; Turn the tool bar off
;;(tool-bar-mode nil)

;; Turn off startup message
(setq inhibit-startup-message t)

;; Don't wrap lines 
(set-default 'truncate-lines t)
(require 'paren)
(show-paren-mode 1)
(custom-set-faces
 '(show-paren-match-face ((((class color)) (:foreground "white" :background "steelblue3"))))
 '(show-paren-mismatch-face ((((class color)) (:foreground "white" :background "darkred")))))

;; Make delete key work correctly
(global-set-key [delete] 'delete-char)

;; cycle through buffers with Ctrl-Tab (like Firefox)
;; WARNING this doesn't really work right now
;(global-set-key (kbd "<C-tab>") 'other-window)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; make sure that marked text is highlighted
(setq transient-mark-mode 1)

;; Colors
;;(add-to-list 'load-path "/Users/gregoryeinfrank/.emacs.d/color-theme.el/file")
;;(require 'color-theme)
;;(eval-after-load "color-theme"
;;  '(progn
;;     (color-theme-initialize)
;;     (color-theme-desert)))

;; TODO: on a mac now, might want to change this
;; set F7 for goto line
(global-set-key [f7] 'goto-line)
;; set F5 for starting a shell
(global-set-key [f5] 'shell)
;; set F6 for query replace
(global-set-key [f6] 'query-replace)

(defun refresh-file ()
  (interactive)
  (revert-buffer t t t)
  )

(global-set-key [f9] 'refresh-file)

;; shell stuff
;; Maps up and down arrow in emacs shell mode to bring back previous commands
(add-hook 'shell-mode-hook
          '(lambda ()
             (define-key shell-mode-map [up] 'comint-previous-input)
             (define-key shell-mode-map [down] 'comint-next-input)
             )
          )
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on) ;;junk chars in shell

(custom-set-variables
  ;; custom-set-variables was added by Custom -- don't edit or cut/paste it!
  ;; Your init file should contain only one such instance.
 '(auto-compression-mode t nil (jka-compr))
 '(case-fold-search t)
 '(current-language-environment "English")
 '(global-font-lock-mode t nil (font-lock))
 '(show-paren-mode t nil (paren)))
(custom-set-faces
  ;; custom-set-faces was added by Custom -- don't edit or cut/paste it!
  ;; Your init file should contain only one such instance.
 )


;; Move an entire region up and down (shifting regions like copy/paste)
(defun move-region (start end n)
  "Move the current region up or down by N lines."
  (interactive "r\np")
  (let ((line-text (delete-and-extract-region start end)))
    (forward-line n)
    (let ((start (point)))
      (insert line-text)
      (setq deactivate-mark nil)
      (set-mark start))))

(defun move-region-up (start end n)
  "Move the current line up by N lines."
  (interactive "r\np")
  (move-region start end (if (null n) -1 (- n))))

(defun move-region-down (start end n)
  "Move the current line down by N lines."
  (interactive "r\np")
  (move-region start end (if (null n) 1 n)))

(global-set-key (kbd "M-<up>") 'move-region-up)
(global-set-key (kbd "M-<down>") 'move-region-up)

;; move up/down 10 lines
(global-set-key (kbd "M-n")
    (lambda () (interactive) (next-line 10)))
(global-set-key (kbd "M-p")
    (lambda () (interactive) (next-line -10)))

;; mo-git-blame
(autoload 'mo-git-blame-file "mo-git-blame" nil t)
(autoload 'mo-git-blame-current "mo-git-blame" nil t)

;; import ipdb; ipdb.set_trace()
(fset 'trace
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ("	import ipdb; ipdb.set_trace()" 0 "%d")) arg)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; US and mustache template files should open in html mode
(setq auto-mode-alist (cons '("\\.us$" . html-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.mustache$" . html-mode) auto-mode-alist))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; LESS files should open in CSS mode
(setq auto-mode-alist (cons '("\\.less$" . css-mode) auto-mode-alist))


;;;;;;;;;;;;
;;Begin DELANO
;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; follow symlinks to version controlled files without confirmation
(setq vc-follow-symlinks t)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Enable mouse support in terminal
(unless window-system
  (require 'mouse)
  (xterm-mouse-mode t)
  (global-set-key [mouse-4] '(lambda ()
                              (interactive)
                              (scroll-down 1)))
  (global-set-key [mouse-5] '(lambda ()
                              (interactive)
                              (scroll-up 1)))
  (defun track-mouse (e))
  (setq mouse-sel-mode t)
)

;; mouse support in osx terminal
(require 'mouse)
(xterm-mouse-mode t)
(defun track-mouse (e)) 
(setq mouse-sel-mode t)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; When a file has a hard link the backup file will be a copy as 
;; opposed to renaming the original file
(setq backup-by-copying-when-linked t) 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; highlight 80 characters on each line - pep8
(require 'fill-column-indicator)
(setq fci-rule-width 1)
(setq fci-rule-color "#dddddd")
(setq-default fci-rule-column 80)
(add-hook 'after-change-major-mode-hook 'fci-mode)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; enable kill ring to interact with osx clipboard. get pb copy from:
;; git clone git://gist.github.com/1023272.git gist-1023272
;; then copy pbcopy to .emacs.d
(require 'pbcopy)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; javascript
(add-to-list 'auto-mode-alist '("\\.js\\'" . javascript-mode))
(autoload 'javascript-mode "javascript" nil t)
(setq js-indent-level 2)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; TRAMP
(require 'tramp)
(setq tramp-default-method "ssh")
(setq tramp-chunksize 127)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; I like tabs of 4 chars
;;(custom-set-variables '(tab-width 4))
;; tab key adds 4 characters
;;(setq default-tab-width 4)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; use only spaces, no tab charaters
(setq-default indent-tabs-mode nil) 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; font size for graphical displays
(set-face-attribute 'default nil :height 140)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; line number mode
(require 'linum)
(global-linum-mode 1)
(setq linum-format "%d ")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Highlight current line
;; (global-hl-line-mode 1)
;; (set-face-attribute hl-line-face nil :underline "white" :background "black")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; stop annoying me with the kill process on exit stuff
;; (defadvice save-buffers-kill-emacs (around no-query-kill-emacs activate)
;;   "Prevent annoying \"Active processes exist\" query when you quit Emacs."
;;   (flet ((process-list ())) ad-do-it))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; save my desktop, and ignore some types, files are 
;; specified using regular expressions, \\ is needed to escape
;;(desktop-save-mode 1)
;;(setq desktop-buffers-not-to-save
;;      (concat "\\COMMIT_EDITMSG\\'")) ;; Ignore git commit messages

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; map some files to their mode
(add-to-list 'auto-mode-alist '("\\dot_emacs\\'" . emacs-lisp-mode))
(add-to-list 'auto-mode-alist '("\\dot_bash_profile\\'" . shell-script-mode))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; flymake for python
(when (load "flymake" t)
  (defun flymake-pyflakes-init ()
    (let* ((temp-file (flymake-init-create-temp-buffer-copy
                       'flymake-create-temp-inplace))) ;; this might have to change to flymake-create-temp-copy if using tramp because it'll be mad slow
    (list "~/.emacs.d/pycheckers.sh" (list temp-file))))
  ;; only process python files
  (add-to-list 'flymake-allowed-file-name-masks
               '("\\.py\\'" flymake-pyflakes-init))
)

(add-hook 'find-file-hook 'flymake-find-file-hook)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; flymake for javascript
(require 'flymake-easy)
(require 'flymake-jslint)
(add-hook 'js-mode-hook 'flymake-jslint-load)


;; make sure the working directory is the same as the temp file
(setq flymake-run-in-place nil)
(setq temporary-file-directory "~/.emacs.d/tmp/")
(setq flymake-log-level 3)
(global-set-key [f10] 'flymake-goto-prev-error)
(global-set-key [f11] 'flymake-goto-next-error)
(require 'flymake-cursor)

;; flymake - underline errors/warnings rather than highlight
(custom-set-faces
 '(flymake-errline ((((class color)) (:underline "red"))))
 '(flymake-warnline ((((class color) (background dark)) (:underline "yellow")))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; no flymake for html
(delete '("\\.html?\\'" flymake-xml-init) flymake-allowed-file-name-masks)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; AUTOCOMPLETE
;;(require 'auto-complete-config)
;;(add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
;;(ac-config-default)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; magit (for git support)
(require 'magit)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; whitespace customizations
;;(require 'whitespace)
;;(global-whitespace-mode 1)
;;(setq whitespace-style '(face empty trailing lines whitespace-line-column))
;;(setq whitespace-line-column 100)
;;;; make whitespace trailing the same as whitespace line
;;(setq whitespace-trailing whitespace-line)
;; cleanup whitespace in buffer
;;(global-set-key (kbd "\C-c w") 'whitespace-cleanup)


;;;;;; windmove (meta-arrows for swtiching windows)
(global-set-key (kbd "C-c <left>")  'windmove-left)
(global-set-key (kbd "C-c <right>") 'windmove-right)
(global-set-key (kbd "C-c <up>")    'windmove-up)
(global-set-key (kbd "C-c <down>")  'windmove-down)

;; el-get
(add-to-list 'load-path "~/.emacs.d/el-get/el-get")

(unless (require 'el-get nil 'noerror)
    (with-current-buffer
            (url-retrieve-synchronously
                     "https://raw.github.com/dimitri/el-get/master/el-get-install.el")
                (let (el-get-master-branch)
                        (goto-char (point-max))
                              (eval-print-last-sexp))))

(el-get 'sync)

;; Jedi
(setq jedi:setup-keys t)
(add-hook 'python-mode-hook 'jedi:setup)

;; Color theme
(color-theme-gray30)

;; projectile
(setq projectile-completion-system 'grizzl)
